%%%-------------------------------------------------------------------
%%% Licensed to the Apache Software Foundation (ASF) under one
%%% or more contributor license agreements.  See the NOTICE file
%%% distributed with this work for additional information
%%% regarding copyright ownership.  The ASF licenses this file
%%% to you under the Apache License, Version 2.0 (the
%%% "License"); you may not use this file except in compliance
%%% with the License.  You may obtain a copy of the License at
%%%
%%%   http://www.apache.org/licenses/LICENSE-2.0
%%%
%%% Unless required by applicable law or agreed to in writing,
%%% software distributed under the License is distributed on an
%%% "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
%%% KIND, either express or implied.  See the License for the
%%% specific language governing permissions and limitations
%%% under the License.
%%%
%%% @doc
%%% This API uses the process dictionary to collect span information
%%% and can be used when all span tags an events happen in the same
%%% request handling process.
%%% @end
%%%-------------------------------------------------------------------

-module(otter_span_id_api).
-export([
    start/1, start/2, start/3,
    finish/1,
    ids/1,
    log/2, log/3,
    tag/3, tag/4
]).

-include_lib("otter_lib/src/otter.hrl").

-spec start(info()) -> pid().
start(Name) ->
    span_process(otter_lib_span:start(Name)).

-spec start(info(), trace_id()) -> pid().
start(Name, TraceId) when is_integer(TraceId) ->
    span_process(otter_lib_span:start(Name, TraceId)).

-spec start(info(), trace_id(), span_id()) -> pid().
start(Name, TraceId, ParentId) when is_integer(TraceId), is_integer(ParentId) ->
    span_process(otter_lib_span:start(Name, TraceId, ParentId)).

-spec tag(pid(), info(), info()) -> ok.
tag(Pid, Key, Value) ->
    Pid ! {tag, Key, Value},
    ok.

-spec tag(pid(), info(), info(), service()) -> ok.
tag(Pid, Key, Value, Service) ->
    Pid ! {tag, Key, Value, Service},
    ok.

-spec log(pid(), info()) -> ok.
log(Pid, Text) ->
    Pid ! {log, Text},
    ok.

-spec log(pid(), info(), service()) -> ok.
log(Pid, Text, Service) ->
    Pid ! {log, Text, Service},
    ok.

-spec finish(pid()) -> ok.
finish(Pid) ->
    Pid ! finish,
    ok.

-spec ids(pid()) -> {trace_id(), span_id()}.
ids(Pid) ->
    Pid ! {get_ids, self()},
    receive
        {otter_span_ids, Ids} -> Ids
    after
        %% Actually we should in general (re)consider the error handling
        %% of otter : probably we'd be better off crashing in the span
        %% encoding phase due to silly data, generated by errors, than
        %% crashing the request handling process we are tracing ...
        300 -> timeout
    end.

span_process(Span) ->
    Timeout = otter_config:read(span_id_api_process_timeout, 30000),
    spawn(fun() -> span_process(Span, Timeout) end).

span_process(Span, Timeout) ->
    receive
        {tag, Tag} ->
            span_process(otter_lib_span:tag(Span, Tag), Timeout);
        {tag, Tag, Service} ->
            span_process(otter_lib_span:tag(Span, Tag, Service), Timeout);
        {log, Text} ->
            span_process(otter_lib_span:log(Span, Text), Timeout);
        {log, Text, Service} ->
            span_process(otter_lib_span:log(Span, Text, Service), Timeout);
        {get_ids, Pid} ->
            Pid ! {otter_span_ids, otter_lib_span:get_ids(Span)},
            span_process(Span, Timeout);
        finish ->
            otter_filter:span(otter_lib_span:finish(Span))
    after
        Timeout ->
            ok
    end.
